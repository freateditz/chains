{"ast":null,"code":"import React from'react';import{Navigate,useLocation}from'react-router-dom';import{useAuth}from'../contexts/AuthContext';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ProtectedRoute=_ref=>{let{children,requiredUserType='citizen'}=_ref;const{user,isLoading}=useAuth();const location=useLocation();// Show loading spinner while checking authentication\nif(isLoading){return/*#__PURE__*/_jsx(\"div\",{className:\"min-h-screen bg-gray-50 flex items-center justify-center\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"text-center\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"}),/*#__PURE__*/_jsx(\"p\",{className:\"mt-4 text-gray-600\",children:\"Loading...\"})]})});}// If not authenticated, redirect to login with return URL\nif(!user){const loginPath=requiredUserType==='citizen'?'/citizen-login':'/admin-login';return/*#__PURE__*/_jsx(Navigate,{to:loginPath,state:{from:location},replace:true});}// If authenticated but wrong user type, redirect to appropriate login\nif(user.userType!==requiredUserType){const loginPath=requiredUserType==='citizen'?'/citizen-login':'/admin-login';return/*#__PURE__*/_jsx(Navigate,{to:loginPath,state:{from:location},replace:true});}// If authenticated and correct user type, render the protected component\nreturn children;};export default ProtectedRoute;","map":{"version":3,"names":["React","Navigate","useLocation","useAuth","jsx","_jsx","jsxs","_jsxs","ProtectedRoute","_ref","children","requiredUserType","user","isLoading","location","className","loginPath","to","state","from","replace","userType"],"sources":["/app/frontend/src/components/ProtectedRoute.js"],"sourcesContent":["import React from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\n\nconst ProtectedRoute = ({ children, requiredUserType = 'citizen' }) => {\n  const { user, isLoading } = useAuth();\n  const location = useLocation();\n\n  // Show loading spinner while checking authentication\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // If not authenticated, redirect to login with return URL\n  if (!user) {\n    const loginPath = requiredUserType === 'citizen' ? '/citizen-login' : '/admin-login';\n    return <Navigate to={loginPath} state={{ from: location }} replace />;\n  }\n\n  // If authenticated but wrong user type, redirect to appropriate login\n  if (user.userType !== requiredUserType) {\n    const loginPath = requiredUserType === 'citizen' ? '/citizen-login' : '/admin-login';\n    return <Navigate to={loginPath} state={{ from: location }} replace />;\n  }\n\n  // If authenticated and correct user type, render the protected component\n  return children;\n};\n\nexport default ProtectedRoute;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,QAAQ,CAAEC,WAAW,KAAQ,kBAAkB,CACxD,OAASC,OAAO,KAAQ,yBAAyB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAElD,KAAM,CAAAC,cAAc,CAAGC,IAAA,EAAgD,IAA/C,CAAEC,QAAQ,CAAEC,gBAAgB,CAAG,SAAU,CAAC,CAAAF,IAAA,CAChE,KAAM,CAAEG,IAAI,CAAEC,SAAU,CAAC,CAAGV,OAAO,CAAC,CAAC,CACrC,KAAM,CAAAW,QAAQ,CAAGZ,WAAW,CAAC,CAAC,CAE9B;AACA,GAAIW,SAAS,CAAE,CACb,mBACER,IAAA,QAAKU,SAAS,CAAC,0DAA0D,CAAAL,QAAA,cACvEH,KAAA,QAAKQ,SAAS,CAAC,aAAa,CAAAL,QAAA,eAC1BL,IAAA,QAAKU,SAAS,CAAC,wEAAwE,CAAM,CAAC,cAC9FV,IAAA,MAAGU,SAAS,CAAC,oBAAoB,CAAAL,QAAA,CAAC,YAAU,CAAG,CAAC,EAC7C,CAAC,CACH,CAAC,CAEV,CAEA;AACA,GAAI,CAACE,IAAI,CAAE,CACT,KAAM,CAAAI,SAAS,CAAGL,gBAAgB,GAAK,SAAS,CAAG,gBAAgB,CAAG,cAAc,CACpF,mBAAON,IAAA,CAACJ,QAAQ,EAACgB,EAAE,CAAED,SAAU,CAACE,KAAK,CAAE,CAAEC,IAAI,CAAEL,QAAS,CAAE,CAACM,OAAO,MAAE,CAAC,CACvE,CAEA;AACA,GAAIR,IAAI,CAACS,QAAQ,GAAKV,gBAAgB,CAAE,CACtC,KAAM,CAAAK,SAAS,CAAGL,gBAAgB,GAAK,SAAS,CAAG,gBAAgB,CAAG,cAAc,CACpF,mBAAON,IAAA,CAACJ,QAAQ,EAACgB,EAAE,CAAED,SAAU,CAACE,KAAK,CAAE,CAAEC,IAAI,CAAEL,QAAS,CAAE,CAACM,OAAO,MAAE,CAAC,CACvE,CAEA;AACA,MAAO,CAAAV,QAAQ,CACjB,CAAC,CAED,cAAe,CAAAF,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}