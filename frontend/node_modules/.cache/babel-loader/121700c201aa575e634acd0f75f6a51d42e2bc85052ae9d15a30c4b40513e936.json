{"ast":null,"code":"// Authentication utility for Justice Chain\nexport class AuthService {\n  // Initialize users storage with demo credentials if not exists\n  static initializeUsers() {\n    if (!localStorage.getItem(this.CITIZEN_USERS_KEY)) {\n      localStorage.setItem(this.CITIZEN_USERS_KEY, JSON.stringify(this.DEMO_CREDENTIALS.citizens));\n    }\n    if (!localStorage.getItem(this.ADMIN_USERS_KEY)) {\n      localStorage.setItem(this.ADMIN_USERS_KEY, JSON.stringify(this.DEMO_CREDENTIALS.admins));\n    }\n  }\n\n  // Get all users of a specific type\n  static getAllUsers(userType = 'citizen') {\n    this.initializeUsers();\n    const key = userType === 'citizen' ? this.CITIZEN_USERS_KEY : this.ADMIN_USERS_KEY;\n    return JSON.parse(localStorage.getItem(key) || '[]');\n  }\n\n  // Save users to localStorage\n  static saveUsers(users, userType = 'citizen') {\n    const key = userType === 'citizen' ? this.CITIZEN_USERS_KEY : this.ADMIN_USERS_KEY;\n    localStorage.setItem(key, JSON.stringify(users));\n  }\n\n  // Signup function for citizens\n  static signupCitizen(userData) {\n    this.initializeUsers();\n    const users = this.getAllUsers('citizen');\n\n    // Check if email already exists\n    if (users.find(user => user.email === userData.email)) {\n      return {\n        success: false,\n        error: 'Email already registered'\n      };\n    }\n\n    // Add new user\n    const newUser = {\n      ...userData,\n      registrationDate: new Date().toISOString()\n    };\n    users.push(newUser);\n    this.saveUsers(users, 'citizen');\n    return {\n      success: true,\n      message: 'Registration successful'\n    };\n  }\n\n  // Signup function for admins\n  static signupAdmin(userData) {\n    this.initializeUsers();\n    const users = this.getAllUsers('admin');\n\n    // Check if email already exists\n    if (users.find(user => user.email === userData.email)) {\n      return {\n        success: false,\n        error: 'Email already registered'\n      };\n    }\n\n    // Add new admin\n    const newAdmin = {\n      ...userData,\n      registrationDate: new Date().toISOString()\n    };\n    users.push(newAdmin);\n    this.saveUsers(users, 'admin');\n    return {\n      success: true,\n      message: 'Admin registration successful'\n    };\n  }\n\n  // Login function for citizens\n  static loginCitizen(email, password) {\n    const users = this.getAllUsers('citizen');\n    const citizen = users.find(c => c.email === email && c.password === password);\n    if (citizen) {\n      const authData = {\n        email: citizen.email,\n        fullName: citizen.fullName || 'User',\n        loginTime: new Date().toISOString(),\n        userType: 'citizen'\n      };\n      localStorage.setItem(this.CITIZEN_STORAGE_KEY, JSON.stringify(authData));\n      return {\n        success: true,\n        user: authData\n      };\n    }\n    return {\n      success: false,\n      error: 'Invalid credentials'\n    };\n  }\n\n  // Login function for admins\n  static loginAdmin(email, password) {\n    const users = this.getAllUsers('admin');\n    const admin = users.find(a => a.email === email && a.password === password);\n    if (admin) {\n      const authData = {\n        email: admin.email,\n        fullName: admin.fullName || 'Admin',\n        loginTime: new Date().toISOString(),\n        userType: 'admin'\n      };\n      localStorage.setItem(this.ADMIN_STORAGE_KEY, JSON.stringify(authData));\n      return {\n        success: true,\n        user: authData\n      };\n    }\n    return {\n      success: false,\n      error: 'Invalid credentials'\n    };\n  }\n\n  // Check if citizen is logged in\n  static isAuthenticated(userType = 'citizen') {\n    const key = userType === 'citizen' ? this.CITIZEN_STORAGE_KEY : this.ADMIN_STORAGE_KEY;\n    const authData = localStorage.getItem(key);\n    return authData ? JSON.parse(authData) : null;\n  }\n\n  // Logout function\n  static logout(userType = 'citizen') {\n    const key = userType === 'citizen' ? this.CITIZEN_STORAGE_KEY : this.ADMIN_STORAGE_KEY;\n    localStorage.removeItem(key);\n  }\n\n  // Get current user\n  static getCurrentUser(userType = 'citizen') {\n    return this.isAuthenticated(userType);\n  }\n}\nAuthService.CITIZEN_STORAGE_KEY = 'justice_chain_citizen_auth';\nAuthService.ADMIN_STORAGE_KEY = 'justice_chain_admin_auth';\nAuthService.CITIZEN_USERS_KEY = 'justice_chain_citizen_users';\nAuthService.ADMIN_USERS_KEY = 'justice_chain_admin_users';\n// Demo credentials (in real app, this would be handled by backend)\nAuthService.DEMO_CREDENTIALS = {\n  citizens: [{\n    email: 'user@example.com',\n    password: 'password123',\n    fullName: 'Demo User',\n    phone: '9876543210'\n  }, {\n    email: 'citizen@gmail.com',\n    password: 'citizen123',\n    fullName: 'Test Citizen',\n    phone: '9876543211'\n  }],\n  admins: [{\n    email: 'admin@justice.gov.in',\n    password: 'admin123',\n    fullName: 'Admin Officer',\n    empId: 'ADM001'\n  }, {\n    email: 'officer@police.gov.in',\n    password: 'officer123',\n    fullName: 'Police Officer',\n    empId: 'POL001'\n  }]\n};","map":{"version":3,"names":["AuthService","initializeUsers","localStorage","getItem","CITIZEN_USERS_KEY","setItem","JSON","stringify","DEMO_CREDENTIALS","citizens","ADMIN_USERS_KEY","admins","getAllUsers","userType","key","parse","saveUsers","users","signupCitizen","userData","find","user","email","success","error","newUser","registrationDate","Date","toISOString","push","message","signupAdmin","newAdmin","loginCitizen","password","citizen","c","authData","fullName","loginTime","CITIZEN_STORAGE_KEY","loginAdmin","admin","a","ADMIN_STORAGE_KEY","isAuthenticated","logout","removeItem","getCurrentUser","phone","empId"],"sources":["C:/Users/vaibhav/OneDrive/Desktop/OneDrive/Documents/JusticeChain/frontend/src/utils/auth.js"],"sourcesContent":["// Authentication utility for Justice Chain\nexport class AuthService {\n  static CITIZEN_STORAGE_KEY = 'justice_chain_citizen_auth';\n  static ADMIN_STORAGE_KEY = 'justice_chain_admin_auth';\n  static CITIZEN_USERS_KEY = 'justice_chain_citizen_users';\n  static ADMIN_USERS_KEY = 'justice_chain_admin_users';\n\n  // Demo credentials (in real app, this would be handled by backend)\n  static DEMO_CREDENTIALS = {\n    citizens: [\n      { email: 'user@example.com', password: 'password123', fullName: 'Demo User', phone: '9876543210' },\n      { email: 'citizen@gmail.com', password: 'citizen123', fullName: 'Test Citizen', phone: '9876543211' }\n    ],\n    admins: [\n      { email: 'admin@justice.gov.in', password: 'admin123', fullName: 'Admin Officer', empId: 'ADM001' },\n      { email: 'officer@police.gov.in', password: 'officer123', fullName: 'Police Officer', empId: 'POL001' }\n    ]\n  };\n\n  // Initialize users storage with demo credentials if not exists\n  static initializeUsers() {\n    if (!localStorage.getItem(this.CITIZEN_USERS_KEY)) {\n      localStorage.setItem(this.CITIZEN_USERS_KEY, JSON.stringify(this.DEMO_CREDENTIALS.citizens));\n    }\n    if (!localStorage.getItem(this.ADMIN_USERS_KEY)) {\n      localStorage.setItem(this.ADMIN_USERS_KEY, JSON.stringify(this.DEMO_CREDENTIALS.admins));\n    }\n  }\n\n  // Get all users of a specific type\n  static getAllUsers(userType = 'citizen') {\n    this.initializeUsers();\n    const key = userType === 'citizen' ? this.CITIZEN_USERS_KEY : this.ADMIN_USERS_KEY;\n    return JSON.parse(localStorage.getItem(key) || '[]');\n  }\n\n  // Save users to localStorage\n  static saveUsers(users, userType = 'citizen') {\n    const key = userType === 'citizen' ? this.CITIZEN_USERS_KEY : this.ADMIN_USERS_KEY;\n    localStorage.setItem(key, JSON.stringify(users));\n  }\n\n  // Signup function for citizens\n  static signupCitizen(userData) {\n    this.initializeUsers();\n    const users = this.getAllUsers('citizen');\n    \n    // Check if email already exists\n    if (users.find(user => user.email === userData.email)) {\n      return { success: false, error: 'Email already registered' };\n    }\n\n    // Add new user\n    const newUser = {\n      ...userData,\n      registrationDate: new Date().toISOString()\n    };\n    users.push(newUser);\n    this.saveUsers(users, 'citizen');\n    \n    return { success: true, message: 'Registration successful' };\n  }\n\n  // Signup function for admins\n  static signupAdmin(userData) {\n    this.initializeUsers();\n    const users = this.getAllUsers('admin');\n    \n    // Check if email already exists\n    if (users.find(user => user.email === userData.email)) {\n      return { success: false, error: 'Email already registered' };\n    }\n\n    // Add new admin\n    const newAdmin = {\n      ...userData,\n      registrationDate: new Date().toISOString()\n    };\n    users.push(newAdmin);\n    this.saveUsers(users, 'admin');\n    \n    return { success: true, message: 'Admin registration successful' };\n  }\n\n  // Login function for citizens\n  static loginCitizen(email, password) {\n    const users = this.getAllUsers('citizen');\n    const citizen = users.find(c => c.email === email && c.password === password);\n    \n    if (citizen) {\n      const authData = {\n        email: citizen.email,\n        fullName: citizen.fullName || 'User',\n        loginTime: new Date().toISOString(),\n        userType: 'citizen'\n      };\n      localStorage.setItem(this.CITIZEN_STORAGE_KEY, JSON.stringify(authData));\n      return { success: true, user: authData };\n    }\n    \n    return { success: false, error: 'Invalid credentials' };\n  }\n\n  // Login function for admins\n  static loginAdmin(email, password) {\n    const users = this.getAllUsers('admin');\n    const admin = users.find(a => a.email === email && a.password === password);\n    \n    if (admin) {\n      const authData = {\n        email: admin.email,\n        fullName: admin.fullName || 'Admin',\n        loginTime: new Date().toISOString(),\n        userType: 'admin'\n      };\n      localStorage.setItem(this.ADMIN_STORAGE_KEY, JSON.stringify(authData));\n      return { success: true, user: authData };\n    }\n    \n    return { success: false, error: 'Invalid credentials' };\n  }\n\n  // Check if citizen is logged in\n  static isAuthenticated(userType = 'citizen') {\n    const key = userType === 'citizen' ? this.CITIZEN_STORAGE_KEY : this.ADMIN_STORAGE_KEY;\n    const authData = localStorage.getItem(key);\n    return authData ? JSON.parse(authData) : null;\n  }\n\n  // Logout function\n  static logout(userType = 'citizen') {\n    const key = userType === 'citizen' ? this.CITIZEN_STORAGE_KEY : this.ADMIN_STORAGE_KEY;\n    localStorage.removeItem(key);\n  }\n\n  // Get current user\n  static getCurrentUser(userType = 'citizen') {\n    return this.isAuthenticated(userType);\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}