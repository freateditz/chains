{"ast":null,"code":"// AuthService.js - uses real backend (MongoDB) on port 5000\nexport class AuthService {\n  // ---------- CITIZEN SIGNUP ----------\n  static async signupCitizen(userData) {\n    try {\n      const res = await fetch('http://localhost:5000/api/auth/citizen/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fullName: userData.fullName,\n          email: userData.email.toLowerCase(),\n          phone: userData.phone,\n          password: userData.password\n        })\n      });\n      const data = await res.json();\n      if (!res.ok) return {\n        success: false,\n        error: data.message || 'Registration failed'\n      };\n      return {\n        success: true,\n        message: data.message || 'Citizen registered successfully'\n      };\n    } catch (err) {\n      return {\n        success: false,\n        error: 'Network or server error during citizen signup'\n      };\n    }\n  }\n\n  // ---------- CITIZEN LOGIN ----------\n  static async loginCitizen(email, password) {\n    try {\n      console.log('Attempting citizen login with:', email);\n      const res = await fetch('http://localhost:5000/api/auth/citizen/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: email.toLowerCase(),\n          password\n        })\n      });\n      const data = await res.json();\n      console.log('Citizen login response:', data);\n      if (!res.ok) return {\n        success: false,\n        error: data.message || 'Login failed'\n      };\n      const authData = {\n        email,\n        loginTime: new Date().toISOString(),\n        userType: 'citizen'\n      };\n      localStorage.setItem(this.CITIZEN_STORAGE_KEY, JSON.stringify(authData));\n      console.log('Citizen login successful, user data stored');\n      return {\n        success: true,\n        user: authData\n      };\n    } catch (err) {\n      console.error('Citizen login error:', err);\n      return {\n        success: false,\n        error: 'Network or server error during citizen login'\n      };\n    }\n  }\n\n  // ---------- ADMIN SIGNUP ----------\n  static async signupAdmin(userData) {\n    try {\n      const res = await fetch('http://localhost:5000/api/auth/admin/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fullName: userData.fullName,\n          email: userData.email.toLowerCase(),\n          password: userData.password\n        })\n      });\n      const data = await res.json();\n      if (!res.ok) return {\n        success: false,\n        error: data.message || 'Registration failed'\n      };\n      return {\n        success: true,\n        message: data.message || 'Admin registered successfully'\n      };\n    } catch (err) {\n      return {\n        success: false,\n        error: 'Network or server error during admin signup'\n      };\n    }\n  }\n\n  // ---------- ADMIN LOGIN ----------\n  static async loginAdmin(email, password) {\n    try {\n      console.log('Attempting admin login with:', email);\n      const res = await fetch('http://localhost:5000/api/auth/admin/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: email.toLowerCase(),\n          password\n        })\n      });\n      const data = await res.json();\n      console.log('Admin login response:', data);\n      if (!res.ok) return {\n        success: false,\n        error: data.message || 'Login failed'\n      };\n      const authData = {\n        email,\n        loginTime: new Date().toISOString(),\n        userType: 'admin'\n      };\n      localStorage.setItem(this.ADMIN_STORAGE_KEY, JSON.stringify(authData));\n      console.log('Admin login successful, user data stored');\n      return {\n        success: true,\n        user: authData\n      };\n    } catch (err) {\n      console.error('Admin login error:', err);\n      return {\n        success: false,\n        error: 'Network or server error during admin login'\n      };\n    }\n  }\n  static logout(userType = 'citizen') {\n    const key = userType === 'admin' ? this.ADMIN_STORAGE_KEY : this.CITIZEN_STORAGE_KEY;\n    localStorage.removeItem(key);\n  }\n  static isAuthenticated(userType = 'citizen') {\n    const key = userType === 'admin' ? this.ADMIN_STORAGE_KEY : this.CITIZEN_STORAGE_KEY;\n    const data = localStorage.getItem(key);\n    return data ? JSON.parse(data) : null;\n  }\n  static getCurrentUser(userType = 'citizen') {\n    return this.isAuthenticated(userType);\n  }\n}\nAuthService.CITIZEN_STORAGE_KEY = 'justice_chain_citizen_auth';\nAuthService.ADMIN_STORAGE_KEY = 'justice_chain_admin_auth';","map":{"version":3,"names":["AuthService","signupCitizen","userData","res","fetch","method","headers","body","JSON","stringify","fullName","email","toLowerCase","phone","password","data","json","ok","success","error","message","err","loginCitizen","console","log","authData","loginTime","Date","toISOString","userType","localStorage","setItem","CITIZEN_STORAGE_KEY","user","signupAdmin","loginAdmin","ADMIN_STORAGE_KEY","logout","key","removeItem","isAuthenticated","getItem","parse","getCurrentUser"],"sources":["C:/Users/ADMIN/Desktop/Justicechain/frontend/src/utils/auth.js"],"sourcesContent":["// AuthService.js - uses real backend (MongoDB) on port 5000\nexport class AuthService {\n  static CITIZEN_STORAGE_KEY = 'justice_chain_citizen_auth';\n  static ADMIN_STORAGE_KEY = 'justice_chain_admin_auth';\n\n  // ---------- CITIZEN SIGNUP ----------\n  static async signupCitizen(userData) {\n    try {\n      const res = await fetch('http://localhost:5000/api/auth/citizen/register', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          fullName: userData.fullName,\n          email: userData.email.toLowerCase(),\n          phone: userData.phone,\n          password: userData.password\n        })\n      });\n\n      const data = await res.json();\n      if (!res.ok) return { success: false, error: data.message || 'Registration failed' };\n\n      return { success: true, message: data.message || 'Citizen registered successfully' };\n    } catch (err) {\n      return { success: false, error: 'Network or server error during citizen signup' };\n    }\n  }\n\n  // ---------- CITIZEN LOGIN ----------\n  static async loginCitizen(email, password) {\n    try {\n      console.log('Attempting citizen login with:', email);\n      const res = await fetch('http://localhost:5000/api/auth/citizen/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email: email.toLowerCase(), password })\n      });\n\n      const data = await res.json();\n      console.log('Citizen login response:', data);\n      if (!res.ok) return { success: false, error: data.message || 'Login failed' };\n\n      const authData = {\n        email,\n        loginTime: new Date().toISOString(),\n        userType: 'citizen'\n      };\n      localStorage.setItem(this.CITIZEN_STORAGE_KEY, JSON.stringify(authData));\n      console.log('Citizen login successful, user data stored');\n      return { success: true, user: authData };\n    } catch (err) {\n      console.error('Citizen login error:', err);\n      return { success: false, error: 'Network or server error during citizen login' };\n    }\n  }\n\n  // ---------- ADMIN SIGNUP ----------\n  static async signupAdmin(userData) {\n    try {\n      const res = await fetch('http://localhost:5000/api/auth/admin/register', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          fullName: userData.fullName,\n          email: userData.email.toLowerCase(),\n          password: userData.password\n        })\n      });\n\n      const data = await res.json();\n      if (!res.ok) return { success: false, error: data.message || 'Registration failed' };\n\n      return { success: true, message: data.message || 'Admin registered successfully' };\n    } catch (err) {\n      return { success: false, error: 'Network or server error during admin signup' };\n    }\n  }\n\n  // ---------- ADMIN LOGIN ----------\n  static async loginAdmin(email, password) {\n    try {\n      console.log('Attempting admin login with:', email);\n      const res = await fetch('http://localhost:5000/api/auth/admin/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email: email.toLowerCase(), password })\n      });\n\n      const data = await res.json();\n      console.log('Admin login response:', data);\n      if (!res.ok) return { success: false, error: data.message || 'Login failed' };\n\n      const authData = {\n        email,\n        loginTime: new Date().toISOString(),\n        userType: 'admin'\n      };\n      localStorage.setItem(this.ADMIN_STORAGE_KEY, JSON.stringify(authData));\n      console.log('Admin login successful, user data stored');\n      return { success: true, user: authData };\n    } catch (err) {\n      console.error('Admin login error:', err);\n      return { success: false, error: 'Network or server error during admin login' };\n    }\n  }\n\n  static logout(userType = 'citizen') {\n    const key = userType === 'admin' ? this.ADMIN_STORAGE_KEY : this.CITIZEN_STORAGE_KEY;\n    localStorage.removeItem(key);\n  }\n\n  static isAuthenticated(userType = 'citizen') {\n    const key = userType === 'admin' ? this.ADMIN_STORAGE_KEY : this.CITIZEN_STORAGE_KEY;\n    const data = localStorage.getItem(key);\n    return data ? JSON.parse(data) : null;\n  }\n\n  static getCurrentUser(userType = 'citizen') {\n    return this.isAuthenticated(userType);\n  }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}