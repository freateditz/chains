{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ADMIN\\\\Desktop\\\\Justicechain\\\\frontend\\\\src\\\\components\\\\ProtectedRoute.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children,\n  requiredUserType = 'citizen'\n}) => {\n  _s();\n  const {\n    user,\n    isLoading\n  } = useAuth();\n  const location = useLocation();\n\n  // Show loading spinner while checking authentication\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen bg-gray-50 flex items-center justify-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mt-4 text-gray-600\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this);\n  }\n\n  // If not authenticated, redirect to login with return URL\n  if (!user) {\n    const loginPath = requiredUserType === 'citizen' ? '/citizen-login' : '/admin-login';\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: loginPath,\n      state: {\n        from: location\n      },\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If authenticated but wrong user type, redirect to appropriate login\n  if (user.userType !== requiredUserType) {\n    const loginPath = requiredUserType === 'citizen' ? '/citizen-login' : '/admin-login';\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: loginPath,\n      state: {\n        from: location\n      },\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If authenticated and correct user type, render the protected component\n  return children;\n};\n_s(ProtectedRoute, \"qHzxiMdsKekwwUogoU9/AUk7+Y4=\", false, function () {\n  return [useAuth, useLocation];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","useLocation","useAuth","jsxDEV","_jsxDEV","ProtectedRoute","children","requiredUserType","_s","user","isLoading","location","className","fileName","_jsxFileName","lineNumber","columnNumber","loginPath","to","state","from","replace","userType","_c","$RefreshReg$"],"sources":["C:/Users/ADMIN/Desktop/Justicechain/frontend/src/components/ProtectedRoute.js"],"sourcesContent":["import React from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\n\nconst ProtectedRoute = ({ children, requiredUserType = 'citizen' }) => {\n  const { user, isLoading } = useAuth();\n  const location = useLocation();\n\n  // Show loading spinner while checking authentication\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // If not authenticated, redirect to login with return URL\n  if (!user) {\n    const loginPath = requiredUserType === 'citizen' ? '/citizen-login' : '/admin-login';\n    return <Navigate to={loginPath} state={{ from: location }} replace />;\n  }\n\n  // If authenticated but wrong user type, redirect to appropriate login\n  if (user.userType !== requiredUserType) {\n    const loginPath = requiredUserType === 'citizen' ? '/citizen-login' : '/admin-login';\n    return <Navigate to={loginPath} state={{ from: location }} replace />;\n  }\n\n  // If authenticated and correct user type, render the protected component\n  return children;\n};\n\nexport default ProtectedRoute;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,WAAW,QAAQ,kBAAkB;AACxD,SAASC,OAAO,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,cAAc,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,gBAAgB,GAAG;AAAU,CAAC,KAAK;EAAAC,EAAA;EACrE,MAAM;IAAEC,IAAI;IAAEC;EAAU,CAAC,GAAGR,OAAO,CAAC,CAAC;EACrC,MAAMS,QAAQ,GAAGV,WAAW,CAAC,CAAC;;EAE9B;EACA,IAAIS,SAAS,EAAE;IACb,oBACEN,OAAA;MAAKQ,SAAS,EAAC,0DAA0D;MAAAN,QAAA,eACvEF,OAAA;QAAKQ,SAAS,EAAC,aAAa;QAAAN,QAAA,gBAC1BF,OAAA;UAAKQ,SAAS,EAAC;QAAwE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC9FZ,OAAA;UAAGQ,SAAS,EAAC,oBAAoB;UAAAN,QAAA,EAAC;QAAU;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7C;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEV;;EAEA;EACA,IAAI,CAACP,IAAI,EAAE;IACT,MAAMQ,SAAS,GAAGV,gBAAgB,KAAK,SAAS,GAAG,gBAAgB,GAAG,cAAc;IACpF,oBAAOH,OAAA,CAACJ,QAAQ;MAACkB,EAAE,EAAED,SAAU;MAACE,KAAK,EAAE;QAAEC,IAAI,EAAET;MAAS,CAAE;MAACU,OAAO;IAAA;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACvE;;EAEA;EACA,IAAIP,IAAI,CAACa,QAAQ,KAAKf,gBAAgB,EAAE;IACtC,MAAMU,SAAS,GAAGV,gBAAgB,KAAK,SAAS,GAAG,gBAAgB,GAAG,cAAc;IACpF,oBAAOH,OAAA,CAACJ,QAAQ;MAACkB,EAAE,EAAED,SAAU;MAACE,KAAK,EAAE;QAAEC,IAAI,EAAET;MAAS,CAAE;MAACU,OAAO;IAAA;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACvE;;EAEA;EACA,OAAOV,QAAQ;AACjB,CAAC;AAACE,EAAA,CA9BIH,cAAc;EAAA,QACUH,OAAO,EAClBD,WAAW;AAAA;AAAAsB,EAAA,GAFxBlB,cAAc;AAgCpB,eAAeA,cAAc;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}