{"ast":null,"code":"// Updated AuthService.js to use real backend (MongoDB) on port 5000\nexport class AuthService {\n  // ---------- CITIZEN SIGNUP ----------\n  static async signupCitizen(userData) {\n    try {\n      const res = await fetch('http://localhost:5000/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username: userData.email.toLowerCase(),\n          password: userData.password\n        })\n      });\n      const data = await res.json();\n      if (!res.ok) return {\n        success: false,\n        error: data.message || 'Registration failed'\n      };\n      return {\n        success: true,\n        message: data.message || 'Citizen registered successfully'\n      };\n    } catch (err) {\n      return {\n        success: false,\n        error: 'Network or server error during citizen signup'\n      };\n    }\n  }\n\n  // ---------- CITIZEN LOGIN ----------\n  static async loginCitizen(email, password) {\n    try {\n      const res = await fetch('http://localhost:5000/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username: email.toLowerCase(),\n          password\n        })\n      });\n      const data = await res.json();\n      if (!res.ok) return {\n        success: false,\n        error: data.message || 'Login failed'\n      };\n      const authData = {\n        email,\n        loginTime: new Date().toISOString(),\n        userType: 'citizen'\n      };\n      localStorage.setItem(this.CITIZEN_STORAGE_KEY, JSON.stringify(authData));\n      return {\n        success: true,\n        user: authData\n      };\n    } catch (err) {\n      return {\n        success: false,\n        error: 'Network or server error during citizen login'\n      };\n    }\n  }\n\n  // ---------- ADMIN SIGNUP ----------\n  static async signupAdmin(userData) {\n    try {\n      const res = await fetch('http://localhost:5000/api/auth/admin/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username: userData.email.toLowerCase(),\n          password: userData.password\n        })\n      });\n      const data = await res.json();\n      if (!res.ok) return {\n        success: false,\n        error: data.message || 'Registration failed'\n      };\n      return {\n        success: true,\n        message: data.message || 'Admin registered successfully'\n      };\n    } catch (err) {\n      return {\n        success: false,\n        error: 'Network or server error during admin signup'\n      };\n    }\n  }\n\n  // ---------- ADMIN LOGIN ----------\n  static async loginAdmin(email, password) {\n    try {\n      const res = await fetch('http://localhost:5000/api/auth/admin/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username: email.toLowerCase(),\n          password\n        })\n      });\n      const data = await res.json();\n      if (!res.ok) return {\n        success: false,\n        error: data.message || 'Login failed'\n      };\n      const authData = {\n        email,\n        loginTime: new Date().toISOString(),\n        userType: 'admin'\n      };\n      localStorage.setItem(this.ADMIN_STORAGE_KEY, JSON.stringify(authData));\n      return {\n        success: true,\n        user: authData\n      };\n    } catch (err) {\n      return {\n        success: false,\n        error: 'Network or server error during admin login'\n      };\n    }\n  }\n  static logout(userType = 'citizen') {\n    const key = userType === 'admin' ? this.ADMIN_STORAGE_KEY : this.CITIZEN_STORAGE_KEY;\n    localStorage.removeItem(key);\n  }\n  static isAuthenticated(userType = 'citizen') {\n    const key = userType === 'admin' ? this.ADMIN_STORAGE_KEY : this.CITIZEN_STORAGE_KEY;\n    const data = localStorage.getItem(key);\n    return data ? JSON.parse(data) : null;\n  }\n  static getCurrentUser(userType = 'citizen') {\n    return this.isAuthenticated(userType);\n  }\n}\nAuthService.CITIZEN_STORAGE_KEY = 'justice_chain_citizen_auth';\nAuthService.ADMIN_STORAGE_KEY = 'justice_chain_admin_auth';","map":{"version":3,"names":["AuthService","signupCitizen","userData","res","fetch","method","headers","body","JSON","stringify","username","email","toLowerCase","password","data","json","ok","success","error","message","err","loginCitizen","authData","loginTime","Date","toISOString","userType","localStorage","setItem","CITIZEN_STORAGE_KEY","user","signupAdmin","loginAdmin","ADMIN_STORAGE_KEY","logout","key","removeItem","isAuthenticated","getItem","parse","getCurrentUser"],"sources":["C:/Users/vaibhav/OneDrive/Desktop/OneDrive/Documents/JusticeChain/frontend/src/utils/auth.js"],"sourcesContent":["// Updated AuthService.js to use real backend (MongoDB) on port 5000\nexport class AuthService {\n  static CITIZEN_STORAGE_KEY = 'justice_chain_citizen_auth';\n  static ADMIN_STORAGE_KEY = 'justice_chain_admin_auth';\n\n  // ---------- CITIZEN SIGNUP ----------\n  static async signupCitizen(userData) {\n    try {\n      const res = await fetch('http://localhost:5000/api/auth/register', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          username: userData.email.toLowerCase(),\n          password: userData.password\n        })\n      });\n\n      const data = await res.json();\n      if (!res.ok) return { success: false, error: data.message || 'Registration failed' };\n\n      return { success: true, message: data.message || 'Citizen registered successfully' };\n    } catch (err) {\n      return { success: false, error: 'Network or server error during citizen signup' };\n    }\n  }\n\n  // ---------- CITIZEN LOGIN ----------\n  static async loginCitizen(email, password) {\n    try {\n      const res = await fetch('http://localhost:5000/api/auth/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username: email.toLowerCase(), password })\n      });\n\n      const data = await res.json();\n      if (!res.ok) return { success: false, error: data.message || 'Login failed' };\n\n      const authData = {\n        email,\n        loginTime: new Date().toISOString(),\n        userType: 'citizen'\n      };\n      localStorage.setItem(this.CITIZEN_STORAGE_KEY, JSON.stringify(authData));\n      return { success: true, user: authData };\n    } catch (err) {\n      return { success: false, error: 'Network or server error during citizen login' };\n    }\n  }\n\n  // ---------- ADMIN SIGNUP ----------\n  static async signupAdmin(userData) {\n    try {\n      const res = await fetch('http://localhost:5000/api/auth/admin/register', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          username: userData.email.toLowerCase(),\n          password: userData.password\n        })\n      });\n\n      const data = await res.json();\n      if (!res.ok) return { success: false, error: data.message || 'Registration failed' };\n\n      return { success: true, message: data.message || 'Admin registered successfully' };\n    } catch (err) {\n      return { success: false, error: 'Network or server error during admin signup' };\n    }\n  }\n\n  // ---------- ADMIN LOGIN ----------\n  static async loginAdmin(email, password) {\n    try {\n      const res = await fetch('http://localhost:5000/api/auth/admin/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username: email.toLowerCase(), password })\n      });\n\n      const data = await res.json();\n      if (!res.ok) return { success: false, error: data.message || 'Login failed' };\n\n      const authData = {\n        email,\n        loginTime: new Date().toISOString(),\n        userType: 'admin'\n      };\n      localStorage.setItem(this.ADMIN_STORAGE_KEY, JSON.stringify(authData));\n      return { success: true, user: authData };\n    } catch (err) {\n      return { success: false, error: 'Network or server error during admin login' };\n    }\n  }\n\n  static logout(userType = 'citizen') {\n    const key = userType === 'admin' ? this.ADMIN_STORAGE_KEY : this.CITIZEN_STORAGE_KEY;\n    localStorage.removeItem(key);\n  }\n\n  static isAuthenticated(userType = 'citizen') {\n    const key = userType === 'admin' ? this.ADMIN_STORAGE_KEY : this.CITIZEN_STORAGE_KEY;\n    const data = localStorage.getItem(key);\n    return data ? JSON.parse(data) : null;\n  }\n\n  static getCurrentUser(userType = 'citizen') {\n    return this.isAuthenticated(userType);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}