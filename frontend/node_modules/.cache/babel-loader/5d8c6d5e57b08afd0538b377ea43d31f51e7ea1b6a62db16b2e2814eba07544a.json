{"ast":null,"code":"// AuthService.js - uses real backend (MongoDB) on port 5000\nconst BACKEND_URL=process.env.REACT_APP_BACKEND_URL||'http://localhost:5000';export class AuthService{// ---------- CITIZEN SIGNUP ----------\nstatic async signupCitizen(userData){try{const res=await fetch(\"\".concat(BACKEND_URL,\"/api/auth/citizen/register\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({fullName:userData.fullName,email:userData.email.toLowerCase(),phone:userData.phone,password:userData.password})});const data=await res.json();if(!res.ok)return{success:false,error:data.message||'Registration failed'};return{success:true,message:data.message||'Citizen registered successfully'};}catch(err){return{success:false,error:'Network or server error during citizen signup'};}}// ---------- CITIZEN LOGIN ----------\nstatic async loginCitizen(email,password){try{console.log('Attempting citizen login with:',email);const res=await fetch(\"\".concat(BACKEND_URL,\"/api/auth/citizen/login\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email:email.toLowerCase(),password})});const data=await res.json();console.log('Citizen login response:',data);if(!res.ok)return{success:false,error:data.message||'Login failed'};const authData={email,loginTime:new Date().toISOString(),userType:'citizen'};localStorage.setItem(this.CITIZEN_STORAGE_KEY,JSON.stringify(authData));console.log('Citizen login successful, user data stored');return{success:true,user:authData};}catch(err){console.error('Citizen login error:',err);return{success:false,error:'Network or server error during citizen login'};}}// ---------- ADMIN SIGNUP ----------\nstatic async signupAdmin(userData){try{const res=await fetch(\"\".concat(BACKEND_URL,\"/api/auth/admin/register\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({fullName:userData.fullName,email:userData.email.toLowerCase(),password:userData.password})});const data=await res.json();if(!res.ok)return{success:false,error:data.message||'Registration failed'};return{success:true,message:data.message||'Admin registered successfully'};}catch(err){return{success:false,error:'Network or server error during admin signup'};}}// ---------- ADMIN LOGIN ----------\nstatic async loginAdmin(email,password){try{console.log('Attempting admin login with:',email);const res=await fetch(\"\".concat(BACKEND_URL,\"/api/auth/admin/login\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email:email.toLowerCase(),password})});const data=await res.json();console.log('Admin login response:',data);if(!res.ok)return{success:false,error:data.message||'Login failed'};const authData={email,loginTime:new Date().toISOString(),userType:'admin'};localStorage.setItem(this.ADMIN_STORAGE_KEY,JSON.stringify(authData));console.log('Admin login successful, user data stored');return{success:true,user:authData};}catch(err){console.error('Admin login error:',err);return{success:false,error:'Network or server error during admin login'};}}static logout(){let userType=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'citizen';const key=userType==='admin'?this.ADMIN_STORAGE_KEY:this.CITIZEN_STORAGE_KEY;localStorage.removeItem(key);}static isAuthenticated(){let userType=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'citizen';const key=userType==='admin'?this.ADMIN_STORAGE_KEY:this.CITIZEN_STORAGE_KEY;const data=localStorage.getItem(key);return data?JSON.parse(data):null;}static getCurrentUser(){let userType=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'citizen';return this.isAuthenticated(userType);}}AuthService.CITIZEN_STORAGE_KEY='justice_chain_citizen_auth';AuthService.ADMIN_STORAGE_KEY='justice_chain_admin_auth';","map":{"version":3,"names":["BACKEND_URL","process","env","REACT_APP_BACKEND_URL","AuthService","signupCitizen","userData","res","fetch","concat","method","headers","body","JSON","stringify","fullName","email","toLowerCase","phone","password","data","json","ok","success","error","message","err","loginCitizen","console","log","authData","loginTime","Date","toISOString","userType","localStorage","setItem","CITIZEN_STORAGE_KEY","user","signupAdmin","loginAdmin","ADMIN_STORAGE_KEY","logout","arguments","length","undefined","key","removeItem","isAuthenticated","getItem","parse","getCurrentUser"],"sources":["/app/frontend/src/utils/auth.js"],"sourcesContent":["// AuthService.js - uses real backend (MongoDB) on port 5000\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:5000';\n\nexport class AuthService {\n  static CITIZEN_STORAGE_KEY = 'justice_chain_citizen_auth';\n  static ADMIN_STORAGE_KEY = 'justice_chain_admin_auth';\n\n  // ---------- CITIZEN SIGNUP ----------\n  static async signupCitizen(userData) {\n    try {\n      const res = await fetch(`${BACKEND_URL}/api/auth/citizen/register`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          fullName: userData.fullName,\n          email: userData.email.toLowerCase(),\n          phone: userData.phone,\n          password: userData.password\n        })\n      });\n\n      const data = await res.json();\n      if (!res.ok) return { success: false, error: data.message || 'Registration failed' };\n\n      return { success: true, message: data.message || 'Citizen registered successfully' };\n    } catch (err) {\n      return { success: false, error: 'Network or server error during citizen signup' };\n    }\n  }\n\n  // ---------- CITIZEN LOGIN ----------\n  static async loginCitizen(email, password) {\n    try {\n      console.log('Attempting citizen login with:', email);\n      const res = await fetch(`${BACKEND_URL}/api/auth/citizen/login`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email: email.toLowerCase(), password })\n      });\n\n      const data = await res.json();\n      console.log('Citizen login response:', data);\n      if (!res.ok) return { success: false, error: data.message || 'Login failed' };\n\n      const authData = {\n        email,\n        loginTime: new Date().toISOString(),\n        userType: 'citizen'\n      };\n      localStorage.setItem(this.CITIZEN_STORAGE_KEY, JSON.stringify(authData));\n      console.log('Citizen login successful, user data stored');\n      return { success: true, user: authData };\n    } catch (err) {\n      console.error('Citizen login error:', err);\n      return { success: false, error: 'Network or server error during citizen login' };\n    }\n  }\n\n  // ---------- ADMIN SIGNUP ----------\n  static async signupAdmin(userData) {\n    try {\n      const res = await fetch(`${BACKEND_URL}/api/auth/admin/register`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          fullName: userData.fullName,\n          email: userData.email.toLowerCase(),\n          password: userData.password\n        })\n      });\n\n      const data = await res.json();\n      if (!res.ok) return { success: false, error: data.message || 'Registration failed' };\n\n      return { success: true, message: data.message || 'Admin registered successfully' };\n    } catch (err) {\n      return { success: false, error: 'Network or server error during admin signup' };\n    }\n  }\n\n  // ---------- ADMIN LOGIN ----------\n  static async loginAdmin(email, password) {\n    try {\n      console.log('Attempting admin login with:', email);\n      const res = await fetch(`${BACKEND_URL}/api/auth/admin/login`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email: email.toLowerCase(), password })\n      });\n\n      const data = await res.json();\n      console.log('Admin login response:', data);\n      if (!res.ok) return { success: false, error: data.message || 'Login failed' };\n\n      const authData = {\n        email,\n        loginTime: new Date().toISOString(),\n        userType: 'admin'\n      };\n      localStorage.setItem(this.ADMIN_STORAGE_KEY, JSON.stringify(authData));\n      console.log('Admin login successful, user data stored');\n      return { success: true, user: authData };\n    } catch (err) {\n      console.error('Admin login error:', err);\n      return { success: false, error: 'Network or server error during admin login' };\n    }\n  }\n\n  static logout(userType = 'citizen') {\n    const key = userType === 'admin' ? this.ADMIN_STORAGE_KEY : this.CITIZEN_STORAGE_KEY;\n    localStorage.removeItem(key);\n  }\n\n  static isAuthenticated(userType = 'citizen') {\n    const key = userType === 'admin' ? this.ADMIN_STORAGE_KEY : this.CITIZEN_STORAGE_KEY;\n    const data = localStorage.getItem(key);\n    return data ? JSON.parse(data) : null;\n  }\n\n  static getCurrentUser(userType = 'citizen') {\n    return this.isAuthenticated(userType);\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}